[% MACRO example(file) BLOCK %]
[%- pl = file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://fastapi.metacpan.org/source/BKB/[% info.name %]-[% info.version %]/examples/[% pl %]> in the distribution.)
[% END %]
[% start_year=2016 %]
=encoding UTF-8

=head1 NAME

Parse::Gitignore - parse .gitignore files

=head1 SYNOPSIS

[% example("synopsis") %]

=head1 VERSION

This documents [% info.colon %] version [% info.version %]
corresponding to git commit L<[% commit.commit %]|[% info.repo
%]/commit/[% commit.commit %]> released on [% commit.date %].

=head1 DESCRIPTION

Parse a .gitignore file and check whether a file matches it.

=head1 METHODS

=head2 new

    my $pg = Parse::Gitignore->new ('./.gitignore');

=head2 ignored

    if ($pg->ignored ('./Makefile')) {
	print "Makefile is ignored.\n";
    }

Check whether a file matches a .gitignore.

=head2 read_gitignore

    $pg->read_gitignore ('.gitignore');

Read a F<.gitignore> file. You can read as many as you like and they
are accumulated.

=head2 excludesfile

    $pg->excludesfile ('/home/user/.gitignore');

Read an excludesfile which is applied to all directories where .git is
found.

=head1 DEPENDENCIES

=over

=item L<File::Basename>
=item L<File::Slurper>
=item L<File::Spec>

=back

=head1 HISTORY

I wrote this because I wanted to have a way to ignore generated files
for a desktop file search application.

[% INCLUDE "author" %]
